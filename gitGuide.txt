버전 만들기

git을 위한 사용자 정보
git을 사용하기 전에 먼저 사용자 정보를 입력해야 한다. 그래야 버전을 저장할때마다
사용자 정보도 같이 저장하기때문이다. 사용자 이름이 jumpstar이고 email이 jumpstar@gmail.com 일 때,
	git config --global user.name "jumpstar"
	git config --global user.emal "jumpstar@gmail.com"

--global 옵션을 사용하면 현재 컴퓨터의 모든 저장소에서 같은 사용자 정보를 사용한다.

git 초기화 하기.
디렉토리 'hello-git'을 만들고 git 저장소로 만들겠다.
	1. mkdir hello-git
	2. cd hello-git
	3. git init
hello-git이라는 디렉토리를 만들고 그 디렉토리 안으로 이동후 git init를 입력한다.
또 다른 방법으로 디렉토리를 만들면서 동시에 초기화를 하려면 다음과 같이 입력한다.
	git init hello-git

hello-git 디렉토리에 .git 이라는 디렉토리가 만들어진다.
hello-git이 working tree이고 .git에 stage와 repository가 있다.
스테이지 내용은 .git/index 파일에 저장되고, commit된 내용은 .git/HEAD 파일에 저장된다.

파일 만들어서 staging하고 commit하기.
	1. 파일을 하나 생성한다. 이 파일은 아직 한번도 staging/commit 된적이 없으므로
		untracked files라 한다.
		test.txt 파일은 만든다. 아직 untracked files에 속한다.
		git status를 입력하면 test.txt는 untracked files라고 표시된다.
	2. 파일을 staging한다. "stage에 올린다.", "index에 등록한다."로 표현하기도 한다.
		git add test.txt 로 test.txt 파일을 staging 한다.
		git commit -a test.txt도 동일한 동작을 한다.(라고 생각된다.)
		git status를 입력하면 test.txt는 new file이라 표시되고 아직 commit이
		안되어 있다고 표시된다.
		Note. git add 뒤에 파일이름 대신 '.'을 붙이면 working tree에 있는 파일 중에
		수정되었고 아직 staging되지 않은 모든 파일을 한꺼번에 stage에 올린다.
	3. stage에 올린 파일들을 commit한다.
		git commit -m 'message' 를 통해 stage에 올려진 파일들을 commit한다.
		'message'는 commit할때 작성하는 문자열이다. commit되는 파일들에대한 수정사항이나
		관련 내용을 적으면 된다.
		git status를 입력하면 commit할 내용이 없으며 working tree가 clean하다고 표시된다.
		git log를 입력하면 commit한 내역이 나온다.
		commit에 관련된 파일까지 살펴보려면 git log --stat를 입력한다.

한번 commit한 파일은 tracked file이 되고 이 후로는 staging과 commit을 한꺼번에 할 수 있다.
	git commit -am 'message'

test.txt 파일 내용을 수정한 후 가장 최근에 commit되어 저장소에 저장된 내용과 어떻게 다른지
확인 하려면 git diff를 입력한다.

working tree에서 특정 파일이나 디렉토리를 버전관리에서 제외하려면 .gitignore 파일을 만들고
파일에 제외하려는 파일 이름과 디렉토리 이름을 적어 놓으면 된다. 예를 들어 working directory에
파일 a.txt와 디렉토리 tmp가 있고 이 파일과 디렉토리를 버전관리에서 제외하려면 .gitignore 파일에
다음과 같은 내용을 입력하면 된다.
	a.txt
	tmp/

가장 최근에 commit한 message를 수정할 수 있다.
git commit --amend를 입력하면 message를 수정할 수 있다.
참고로 amend는 개정하다,수정하다 라는 뜻이다.

working tree에서 수정한 파일 되돌리기.
working tree에 있는 파일을 수정하였고 아직 staging을 안한 경우(staging을 안했으니 당연히
commint도 안했다.) 수정된 파일을 가장 최근에 commit한 내용으로 되돌리려면 다음 명령을
사용한다. 파일 이름이 check.txt 인 경우,
	git restore check.txt 또는 git checkout -- check.txt
이렇게 되돌린 파일은 복구가 되지 않는다.

staging한 파일 되돌리기
수정된 파일을 staging했을 때 staging을 취소하려면 다음 명령을 사용한다.
	git reset HEAD check.txt 또는 git restore --staged check.txt
git reset HEAD 인 경우 파일 이름을 지정하지 않으면 staging된 모든 파일을 stage에서 내린다.
git restore --staged 인 경우 파일 이름을 지정해야 한다.

commit 되돌리기.
가장 최근에 commit한 내용을 취소하려면 다음 명령을 사용한다.
	git reset HEAD^
만약 최근 3개의 commit을 취소하려면 다음과 같이 한다.
	git reset HEAD~3
다음은 git reset 명령의 옵션들이다.
	1. --soft HEAD^
	최근 commit을 하기 전 상태로 working tree를 되돌린다.
	staging 내용은 그대로 둔다. 파일이 수정되어 있어도 변경되지 않는다.
	즉, commit 내용만 변경된다.
	2. --mixed HEAD^
	최근 commit과 staging을 하기 전 상태로 working tree를 되돌린다.
	git reset 명령을 옵션없이 사용할 경우 이 옵션을 기본으로 사용한다.
	파일이 수정되어 있어도 그대로 둔다. staging을 취소하고 commit을 취소한다.
	3. --hard HEAD^
	최근 commit과 staging, 그리고 파일 수정 전 상태로 working tree를 
	되돌린다. 되돌린 내용은 복구되지 않는다.
	staging을 취소하고 commit을 변경한다. 현재 commit에 맞게 파일도 변경한다.

특정 commit으로 되돌리기 - hash 사용.
특정 commit으로 되돌리고 이 후에 commit된 내용을 지우려면 다음과 같이 한다.
되돌리려는 commit의 hash가 60938b9a9c9cd850ca5b195d682e065bd1d555ad 인 경우,
	git reset --hard 60938b9a9c9cd850ca5b195d682e065bd1d555ad
그러면 hash값이 60938b9a9c9cd850ca5b195d682e065bd1d555ad 인 commit이 최신이 되고,
working tree의 파일 내용도 변경된다. 만약 --hard 옵션을 빼면 최신 commit만 변경되고
working tree의 파일 내용은 변경되지 않는다.
	git reset 60938b9a9c9cd850ca5b195d682e065bd1d555ad

commit 삭제하지 않고 되돌리기
git reset은 특정 commit으로 되돌아 가면서 그 이후 commit들은 모두 삭제한다.
commit을 취소하고 이전 commit으로 되돌아가지만 취소된 commit을 남겨 두려면
git revert 명령을 사용한다.
	=> 정확한 내용은 아직 잘 모르겠지만, 최신부터 하나씩 revert해나가야 한다.
	=> 예를 들면 최신 2개를 취소하려면 revert를 2번 해야 한다. 그렇지 않고 
	=> 한단계를 뛰어 넘어서 revert 해보니 이상한 에러가 나오더라. 에러가
	=> 나왔을 때 revert를 취소하려면 git revert --abort를 입력하라고
	=> 되어 잇어서 그렇게 해보니 취소가 되더라.
Note. git reset은 되돌아 가려는 hash를 지정하지만 git revert는 취소하는 hash를 지정한다.

취소하려는 commit의 hash가 de77d17437038a05d28a5e6ca8df4dbe9e4b2cf1 이라면
	git revert de77d17437038a05d28a5e6ca8df4dbe9e4b2cf1
그러면 revert 관련 메시지 작성창이 나오고 메시지 작성후 저장/종료하면 revert가 완료된다.
revert된 commit은 삭제되지 않고 대신 해당 commit이 revert되었다는 새로운 commit이
추가 된다. 그리고 working tree의 파일 내용도 변경된다.

revert 관련 test
	1. 파일에 1을 쓰고 message를 "test1"로 commit.
	2. 파일에 2를 추가하고 'test2'로 commit.
	3. 파일에 3을 추가하고 'test3'으로 commit. 현재 파일 내용은 다음과 같다.
		1
		2
		3
	4. 'test3'을 revert해서 'test2'로 이동.
	5. 파일에 4를 추가하고 'test4'로 commit.
	6. 파일에 5를 추가하고 'test5'로 commit.
	7. 여기에서 테스트를 진행. 위 4번에서 'test3'을 revert했었다. 그래서 'test2'에서 
		'test4'로 이동되었다. 여기에서 'test3'으로 갈 수 있는지 테스트 했다.
		'test3'의 hash가 1234abcd...라고 했을때,
			git reset --hard 1234abcd...
		라고 입력하니 'test3'으로 이동하여 파일 내용이 다음과 같이 되었다.
			1
			2
			3
결론, revert한 곳으로 복구될 수 있다. 다만 git reset --hard를 사용했으므로 그 이후
commit들은 모두 사라졌다.

또 다른 테스트. revert한 것을 다시 revert하면 어떻게 될까?
	1. 파일에 'a'를 쓰고 'add a'로 commit.
	2. 'b'를 추가하고 'add b'로 commit.
	3. 'c'를 추가하고 'add c'로 commit. 현재 파일 내용은 다음과 같다.
		a
		b
		c
	4. 'add c'를 revert한다. 그래서 파일 내용은 다음과 같아진다.
		a
		b
	5. 'add c'를 revert한걸 다시 revert했더니 파일 내용이 다음과 같아졌다.
		a
		b
		c
결론, revert한걸 다시 revert하니 원래대로 되돌아 왔다. 물론 git log에는 그 내용이 다 남아 있다.
